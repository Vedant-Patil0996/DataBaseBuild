week-2-day-1
created the pager system for tackling the durability part so that data doesnt vanish after java program is
closed or stopped. for now only single file implementation
->used page_size and offset concepts
->problems faced
1.in deletion as it would leave huge gaps in file
=>system is incredibly slow if we manually shift, so maybe dynamic allocation type smtg would work
sol: checklist concept(optimization)(I GOT CONFUSED MORE AHHHH )
2.PageCount is done by counting the characters of the file and dividing by size...restart doubt clear

<------------------------------------------------------------------------------------------------------>

didnt do shit in one week due to sih
week-3-day-1(phase 3- serialization and deserialization)
Q)Why do you require this part?
well obv i didnt understand it at first and mostly likely will forget but lets simplify this
->serialization is basically storing the entire tree node by node in byte format like take a node and right
down its pointer and siblings in file...so basically storage and retrieval.
->deserialization is taking the information of tree in computer memory and rebuilding the tree...
if the file is closed it would help us building the tree again node by node because of each nodes information
present in it.

wordly defination:
->Serialization is the process of taking one single, live BTreeNode object from memory and translating it
into a structured byte[] array that the Pager can write to a single page in the file. It's the
"translation for storage" part.
-> Deserialization is the process of taking a byte[] array (that the Pager just read from the file) and
using it to reconstruct a single, live BTreeNode object back in the computer's memory